Сложение (+)
3+4
Вычитание (-)
>>> 3-4
Умножение (*)
>>> 3*4
Деление (/)
>>> 3/4
Возведение в степень (**)
>>> 3**4
Деление без остатка (//)
>>> 4//3
Деление по модулю (остаток от деления) (%)
Выполняет деление и возвращает значение остатка.
>>> 3%4
Операторы сравнения
Меньше (<)
Больше (>)
Меньше или равно (<=)
Больше или равно (>=)
Равно (==)
Не равно (!=)

Сложение и присваивание (+=)
Суммирует значение обеих сторон и присваивает его выражению слева. a += 10 — это то же самое, что и a = a + 10.
Вычитание и присваивание (-=)
Вычитает значение справа из левого и присваивает его выражению слева.
Деление и присваивание (/=)
Делит значение слева на правое. Затем присваивает его выражению слева.
Умножение и присваивание (*=)
Перемножает значения обеих сторон. Затем присваивает правое левому.
Деление по модулю и присваивание (%=)
Выполняет деление по модулю для обеих частей. Результат присваивает левой части.
Возведение в степень и присваивание (**=)
Выполняет возведение левой части в степень значения правой части. Затем присваивает значение левой части.
Деление с остатком и присваивание (//=)
Выполняет деление с остатком и присваивает результат левой части.

Логические операторы Python
(and)
(or)
(not)
(in)
(not in)
(is)
(is not)
(&)
Проводит побитовую операцию and над двумя значением. Здесь бинарная 2 — это 10, а 3 — 11. Результатом побитового and является 10 — бинарная 2. Побитовое and над 011(3) и 100(4) выдает результат 000(0).
(|)
(^)
Инвертирующий оператор (~)
Бинарный сдвиг влево (<<)
Он сдвигает значение левого операнда на позицию, которая указана справа. Так, бинарная 2 — это 10. 2 << 2 сдвинет значение на две позиции влево и выйдет 1000 — это бинарная 8.
Пример:

>>> 2<<2
8
Бинарный сдвиг вправо (>>)
Сдвигает значение левого оператора на позицию, указанную справа. Так, бинарная 3 — это 11. 3 >> 2 сдвинет значение на два положение вправо. Результат — 00, то есть 0. 3 >> 1 сдвинет на одну позицию вправо, а результатом будет 01 — бинарная 1.
Пример:

>>> 3>>2
>>> 3>>1
1
Выводы
В этом уроке были рассмотрены все 7 типов операторов Python. Для каждого был предложен пример в IDE. Для понимания особенностей работы операторов нужно продолжать с ними работать, использовать в условных конструкциях и объединять.